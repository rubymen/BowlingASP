@model BowlingASP.GameService.game

@{
    ViewBag.Title = "Modification de la partie #"+(Model.Id);
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script>
    var addInput, deleteInput, i;
  // Comme pour la vue Create. Ajout d'input dynamique et donc de joueurs.
    $(document).ready(function () {
        i = $('form').find('input[type=text]').last().attr('id');
        addInput = function () {
            i++;
            $(".col-form").append('<label for="Pseudo' + i + '">Joueur ' + i + '</label><input class="text-box single-line form-control" id="Pseudo' + i + '" name="Pseudo' + i + '" type="text" value="" />');
        };
        deleteInput = function () {
            alert("Suppression");
        }
    });

    var submitForm = function () {
        if (document.getElementsByName("Pseudo" + i)[0].value != "") {
            document.getElementById("form-id").submit();
        } else {
            alert("Renseigne les pseudos des joueurs !");
        }
    };
</script>
<div class="container">
    <h2>Modification de la partie #@(Model.Id)</h2>
    @Html.ActionLink("Retour", "Index", "Game", null, new { @class = "btn btn-default" })
    <!-- Formulaire de modification d'une partie. La vue reçoit une partie et place les joueurs de celle-ci dans les input.-->

    @using (Html.BeginForm("Edit", "Game", FormMethod.Post, new { id = "form-id" }))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true)
        <div class="row">
            <div class="col-md-12">
                <div class="form-group">
                    <div class="col-md-12 col-form">
                        @{
        int i = 0;
        <!-- Récupération des joueurs de la partie -->
        foreach (BowlingASP.GameService.player player in Model.players)
        {
            <label for="Pseudo@(i)">Joueur @i</label>
                            <div class="input-group">
                                <input class="text-box single-line form-control" id="@(i)" name="Pseudo@(i)" type="text" value="@Html.DisplayFor(model => player.Pseudo)" />
                                <div class="input-group-btn">
                                    <!-- Possibilité de supprimer un joueur précédemment assigné à une partie. Controlleur Player appelé. -->
                                    @Html.ActionLink("Supprimer", "Delete", "Player", new { id = Html.DisplayFor(model => player.Id) }, new { @class = "btn btn-danger" })
                                </div>
                            </div>
            i++;
        }
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="row mt">
            <div class="col-md-12">
                <input type="button" value="Ajouter un joueur" onclick="addInput()" class="btn btn-default" />
                <input type="button" value="Modifier la partie" onclick="submitForm()" class="btn btn-success pull-right" />
            </div>
        </div>
    }
</div>